# ansible-playbook install_car.yml -v
# ansible-playbook install_car.yml -e "clear_virt_env=yes update_cache=yes" -v

---
- hosts: cars
  become: yes
  become_method: sudo

  vars:
    app_path: /opt/car_server
    app_user: car
    git_path: https://github.com/telminov/arduino-battle-server.git
    tmp_checkout_path: /tmp/github_project
    source_path: "{{ app_path }}/source"
    virt_env_path: "{{ app_path }}/virt_env"
    clear_virt_env: no
    update_cache: no

  tasks:
    - name: update apt cache
      apt: update_cache=yes
      when: update_cache

    - name: install packages
      apt: name={{ item }}
      with_items:
        - git
        - ntp

    - name: install python utils
      pip: name={{ item }}
      with_items:
        - virtualenv
        - supervisor

    - name: create car user
      user: name={{ app_user }} groups=dialout


    - name: clear source directory
      file: path={{ source_path }} state=absent

    - name: clear virtual env directory
      file: path={{ virt_env_path }} state=absent
      when: clear_virt_env

    - name: clear checkout directory
      file: path={{ tmp_checkout_path }} state=absent


    - name: create car app direcotry
      file: path={{ app_path }} state=directory mode=755 owner=car

    - name: checkout code
      git: repo={{ git_path }} dest={{ tmp_checkout_path }}

    - name: move car code
      shell: mv {{ tmp_checkout_path }}/car_server {{ source_path }}

    - name: initiate virtualenv requirements
      pip: virtualenv={{ virt_env_path }}
           virtualenv_python=python3.4
           requirements={{ source_path }}/requirements.txt

    - name: set directory owner
      file: path={{ app_path }} recurse=yes owner={{ app_user }}

    - name: remove tmp file
      file: path={{ item }}
      with_items:
        - "{{ tmp_checkout_path }}"


    - name: Create supervisor directory
      file: path=/etc/supervisor state=directory

    - name: Supervisor config file stat
      stat: path=/etc/supervisor/supervisor.conf
      register: st

    - name: Create default supervisor config
      shell: echo_supervisord_conf > /etc/supervisor/supervisor.conf
      when: not st.stat.exists

    - name: Add include directory to config
      lineinfile: dest=/etc/supervisor/supervisor.conf state=present
                  line='\n[include]\nfiles = /etc/supervisor/conf.d/*.conf'
      when: not st.stat.exists

    - name: Add supervisor to autostart
      lineinfile: dest=/etc/rc.local regexp="supervisor" insertbefore="exit 0"
                 line="/usr/local/bin/supervisord -c /etc/supervisor/supervisor.conf"

    - name: Create supervisor conf.d direcotry
      file: path=/etc/supervisor/conf.d state=directory

    - name: Copy supervisor conf
      template: src=templates/supervisor.conf.tpl dest=/etc/supervisor/conf.d/car_server.conf

    - name: Start supervisord
      shell: supervisord -c /etc/supervisor/supervisor.conf
      when: not st.stat.exists

    - name: Reread supervisor config
      shell: supervisorctl -c /etc/supervisor/supervisor.conf reread

    - name: Update supervisor config
      shell: supervisorctl -c /etc/supervisor/supervisor.conf update
